generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String               @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                UserRole             @default(USER)
  isPremium           Boolean              @default(false)
  isActive            Boolean              @default(true)
  stripeCustomerId    String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  accounts            Account[]
  sessions            Session[]
  artistProfile       ArtistProfile?
  playEvents          PlayEvent[]           @relation("UserPlays")
  likeEvents          LikeEvent[]           @relation("UserLikes")
  saveEvents          SaveEvent[]           @relation("UserSaves")
  shareEvents         ShareEvent[]          @relation("UserShares")
  downloadEvents      DownloadEvent[]       @relation("UserDownloads")
  playlistSubmissions PlaylistSubmission[] @relation("PlaylistSubmissions")
  reviewedSubmissions PlaylistSubmission[] @relation("PlaylistSubmissionReviewedBy")
  addedPlaylistTracks PlaylistTrack[]      @relation("PlaylistTrackAddedBy")
  createdPlaylists    Playlist[]           @relation("PlaylistCreatedBy")
  smartLinks          SmartLink[]
  tracks              Track[]
  uploadJobs          UploadJob[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ArtistProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  artistName     String   @unique
  bio            String?
  profileImage   String?
  coverImage     String?
  location       String?
  website        String?
  genre          String?
  slug           String?  @unique
  socialLinks    Json?
  streamingLinks Json?
  isPublic       Boolean  @default(true)
  isVerified     Boolean  @default(false)
  isActive       Boolean  @default(true)
  totalPlays     Int      @default(0)
  totalLikes     Int      @default(0)
  totalFollowers Int      @default(0)
  profileViews   Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tracks         Track[]
  strengthScores ArtistStrengthScore[] @relation("ArtistStrengthScores")
  metrics        ArtistMetrics[] @relation("ArtistMetrics")
  trends         ArtistTrends[] @relation("ArtistTrends")

  @@map("artist_profiles")
}

model Track {
  id                  String               @id @default(cuid())
  title               String
  coverImageUrl       String?
  genre               String?
  album               String?
  description         String?
  duration            Int?
  playCount           Int                  @default(0)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  filePath            String
  albumArtwork        String?
  artist              String?
  artistProfileId     String
  bitrate             Int?
  bpm                 Int?
  channels            Int?
  composer            String?
  copyrightInfo       String?
  distributionRights  String?
  downloadCount       Int                  @default(0)
  fileSize            Int?
  isDownloadable      Boolean              @default(false)
  isExplicit          Boolean              @default(false)
  isPublic            Boolean              @default(true)
  isrc                String?
  licenseType         String?
  likeCount           Int                  @default(0)
  lyrics              String?
  releaseDate         DateTime?
  sampleRate          Int?
  shareCount          Int                  @default(0)
  uniqueUrl           String               @unique
  userId              String
  watermarkId         String?
  year                Int?
  playEvents          PlayEvent[]           @relation("TrackPlays")
  likeEvents          LikeEvent[]           @relation("TrackLikes")
  saveEvents          SaveEvent[]           @relation("TrackSaves")
  shareEvents         ShareEvent[]          @relation("TrackShares")
  downloadEvents      DownloadEvent[]       @relation("TrackDownloads")
  dailyStats          DailyStats[]          @relation("TrackDailyStats")
  weeklyStats         WeeklyStats[]         @relation("TrackWeeklyStats")
  monthlyStats        MonthlyStats[]        @relation("TrackMonthlyStats")
  yearlyStats         YearlyStats[]         @relation("TrackYearlyStats")
  playlistSubmissions PlaylistSubmission[]
  playlistTracks      PlaylistTrack[]
  smartLinks          SmartLink[]
  artistProfile       ArtistProfile        @relation(fields: [artistProfileId], references: [id], onDelete: Cascade)
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tracks")
}

model PlayEvent {
  id             String    @id @default(cuid())
  trackId        String
  userId         String?
  sessionId      String
  timestamp      DateTime
  source         String    // 'landing' | 'playlist' | 'search' | 'direct' | 'share'
  playlistId     String?
  userAgent      String
  ip             String?
  duration       Int?      // How long they actually played (seconds)
  completionRate Int?      // 0-100%
  skipped        Boolean   @default(false)
  replayed       Boolean   @default(false)
  createdAt      DateTime  @default(now())

  // Relations
  track          Track     @relation("TrackPlays", fields: [trackId], references: [id], onDelete: Cascade)
  user           User?     @relation("UserPlays", fields: [userId], references: [id], onDelete: SetNull)

  @@index([trackId])
  @@index([timestamp])
  @@index([sessionId])
  @@index([source])
  @@map("play_events")
}

model SmartLink {
  id            String         @id @default(cuid())
  trackId       String
  userId        String
  slug          String         @unique
  clickCount    Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  platformLinks PlatformLink[]
  track         Track          @relation(fields: [trackId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("smart_links")
}

model PlatformLink {
  id          String    @id @default(cuid())
  smartLinkId String
  platform    Platform
  url         String
  clickCount  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  smartLink   SmartLink @relation(fields: [smartLinkId], references: [id], onDelete: Cascade)

  @@map("platform_links")
}

model UploadJob {
  id        String       @id @default(cuid())
  userId    String
  key       String       @unique
  status    UploadStatus @default(PENDING_UPLOAD)
  fileName  String
  fileType  String
  fileSize  Int
  uploadUrl String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("upload_jobs")
}

model PlaylistTypeDefinition {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  description      String?
  icon             String?
  color            String?
  maxInstances     Int      @default(-1)
  requiresProvince Boolean  @default(false)
  defaultMaxTracks Int      @default(20)
  displayOrder     Int      @default(0)
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  playlists        Playlist[]

  @@map("playlist_types")
}

model Playlist {
  id                      String               @id @default(cuid())
  name                    String
  description             String?
  playlistTypeId          String
  coverImage              String
  maxTracks               Int
  currentTracks           Int                  @default(0)
  status                  PlaylistStatus       @default(INACTIVE)
  submissionStatus        SubmissionStatus     @default(CLOSED)
  maxSubmissionsPerArtist Int                  @default(1)
  province                String?
  createdBy               String
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  order                   Int                  @default(0)
  
  // Relations
  playlistType            PlaylistTypeDefinition @relation(fields: [playlistTypeId], references: [id])
  analytics               PlaylistAnalytics[]
  submissions             PlaylistSubmission[]
  tracks                  PlaylistTrack[]
  createdByUser           User                 @relation("PlaylistCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("playlists")
}

model PlaylistSubmission {
  id             String                @id @default(cuid())
  playlistId     String
  trackId        String
  artistId       String
  status         TrackSubmissionStatus @default(PENDING)
  submittedAt    DateTime              @default(now())
  reviewedAt     DateTime?
  reviewedBy     String?
  adminComment   String?
  artistComment  String?
  artist         User                  @relation("PlaylistSubmissions", fields: [artistId], references: [id], onDelete: Cascade)
  playlist       Playlist              @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  reviewedByUser User?                 @relation("PlaylistSubmissionReviewedBy", fields: [reviewedBy], references: [id])
  track          Track                 @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@map("playlist_submissions")
}

model PlaylistTrack {
  id           String   @id @default(cuid())
  playlistId   String
  trackId      String
  order        Int
  addedAt      DateTime @default(now())
  addedBy      String
  submissionId String?
  addedByUser  User     @relation("PlaylistTrackAddedBy", fields: [addedBy], references: [id], onDelete: Cascade)
  playlist     Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  track        Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([playlistId, trackId])
  @@map("playlist_tracks")
}

model PlaylistAnalytics {
  id              String   @id @default(cuid())
  playlistId      String
  date            DateTime @default(now())
  views           Int      @default(0)
  plays           Int      @default(0)
  likes           Int      @default(0)
  shares          Int      @default(0)
  uniqueListeners Int      @default(0)
  playlist        Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@unique([playlistId, date])
  @@map("playlist_analytics")
}

enum UserRole {
  USER
  ARTIST
  ADMIN
}

enum Platform {
  SPOTIFY
  APPLE_MUSIC
  YOUTUBE
  SOUNDCLOUD
}

enum UploadStatus {
  PENDING_UPLOAD
  UPLOADED
  PROCESSING
  COMPLETED
  FAILED
}

enum PlaylistType {
  GENRE
  FEATURED
  TOP_TEN
  PROVINCE
}

enum PlaylistStatus {
  ACTIVE
  INACTIVE
}

enum SubmissionStatus {
  OPEN
  CLOSED
}

enum TrackSubmissionStatus {
  PENDING
  APPROVED
  REJECTED
  SHORTLISTED
}

// ===== STATS & ANALYTICS MODELS =====

model LikeEvent {
  id        String   @id @default(cuid())
  trackId   String
  userId    String?
  sessionId String
  timestamp DateTime
  source    String
  action    String   // 'like' | 'unlike'
  createdAt DateTime @default(now())

  // Relations
  track     Track    @relation("TrackLikes", fields: [trackId], references: [id], onDelete: Cascade)
  user      User?    @relation("UserLikes", fields: [userId], references: [id], onDelete: SetNull)

  @@index([trackId])
  @@index([timestamp])
  @@index([sessionId])
  @@map("like_events")
}

model SaveEvent {
  id         String   @id @default(cuid())
  trackId    String
  userId     String?
  sessionId  String
  timestamp  DateTime
  playlistId String
  action     String   // 'save' | 'unsave'
  createdAt  DateTime @default(now())

  // Relations
  track      Track    @relation("TrackSaves", fields: [trackId], references: [id], onDelete: Cascade)
  user       User?    @relation("UserSaves", fields: [userId], references: [id], onDelete: SetNull)

  @@index([trackId])
  @@index([timestamp])
  @@index([sessionId])
  @@map("save_events")
}

model ShareEvent {
  id        String   @id @default(cuid())
  trackId   String
  userId    String?
  sessionId String
  timestamp DateTime
  platform  String   // 'twitter' | 'facebook' | 'instagram' | 'whatsapp' | 'copy_link' | 'embed'
  source    String
  createdAt DateTime @default(now())

  // Relations
  track     Track    @relation("TrackShares", fields: [trackId], references: [id], onDelete: Cascade)
  user      User?    @relation("UserShares", fields: [userId], references: [id], onDelete: SetNull)

  @@index([trackId])
  @@index([timestamp])
  @@index([sessionId])
  @@map("share_events")
}

model DownloadEvent {
  id        String   @id @default(cuid())
  trackId   String
  userId    String?
  sessionId String
  timestamp DateTime
  source    String
  userAgent String
  ip        String?
  createdAt DateTime @default(now())

  // Relations
  track     Track    @relation("TrackDownloads", fields: [trackId], references: [id], onDelete: Cascade)
  user      User?    @relation("UserDownloads", fields: [userId], references: [id], onDelete: SetNull)

  @@index([trackId])
  @@index([timestamp])
  @@index([sessionId])
  @@map("download_events")
}

// ===== AGGREGATED STATS TABLES =====

model DailyStats {
  id                 String   @id @default(cuid())
  trackId            String
  date               DateTime @db.Date
  totalPlays         Int      @default(0)
  uniquePlays        Int      @default(0)
  totalLikes         Int      @default(0)
  totalShares        Int      @default(0)
  totalDownloads     Int      @default(0)
  totalSaves         Int      @default(0)
  avgDuration        Float    @default(0)
  avgCompletionRate  Float    @default(0)
  skipRate           Float    @default(0)
  replayRate         Float    @default(0)
  createdAt          DateTime @default(now())

  // Relations
  track              Track    @relation("TrackDailyStats", fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([trackId, date], name: "trackId_date")
  @@index([date])
  @@index([trackId])
  @@map("daily_stats")
}

model WeeklyStats {
  id                 String   @id @default(cuid())
  trackId            String
  weekStart          DateTime @db.Date
  totalPlays         Int      @default(0)
  uniquePlays        Int      @default(0)
  totalLikes         Int      @default(0)
  totalShares        Int      @default(0)
  totalDownloads     Int      @default(0)
  totalSaves         Int      @default(0)
  avgDuration        Float    @default(0)
  avgCompletionRate  Float    @default(0)
  skipRate           Float    @default(0)
  replayRate         Float    @default(0)
  createdAt          DateTime @default(now())

  // Relations
  track              Track    @relation("TrackWeeklyStats", fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([trackId, weekStart], name: "trackId_weekStart")
  @@index([weekStart])
  @@index([trackId])
  @@map("weekly_stats")
}

model MonthlyStats {
  id                 String   @id @default(cuid())
  trackId            String
  monthStart         DateTime @db.Date
  totalPlays         Int      @default(0)
  uniquePlays        Int      @default(0)
  totalLikes         Int      @default(0)
  totalShares        Int      @default(0)
  totalDownloads     Int      @default(0)
  totalSaves         Int      @default(0)
  avgDuration        Float    @default(0)
  avgCompletionRate  Float    @default(0)
  skipRate           Float    @default(0)
  replayRate         Float    @default(0)
  createdAt          DateTime @default(now())

  // Relations
  track              Track    @relation("TrackMonthlyStats", fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([trackId, monthStart], name: "trackId_monthStart")
  @@index([monthStart])
  @@index([trackId])
  @@map("monthly_stats")
}

model YearlyStats {
  id                 String   @id @default(cuid())
  trackId            String
  year               Int
  totalPlays         Int      @default(0)
  uniquePlays        Int      @default(0)
  totalLikes         Int      @default(0)
  totalShares        Int      @default(0)
  totalDownloads     Int      @default(0)
  totalSaves         Int      @default(0)
  avgDuration        Float    @default(0)
  avgCompletionRate  Float    @default(0)
  skipRate           Float    @default(0)
  replayRate         Float    @default(0)
  createdAt          DateTime @default(now())

  // Relations
  track              Track    @relation("TrackYearlyStats", fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([trackId, year], name: "trackId_year")
  @@index([year])
  @@index([trackId])
  @@map("yearly_stats")
}

// ===== ARTIST STRENGTH SCORING TABLES =====

model ArtistStrengthScore {
  id                 String   @id @default(cuid())
  artistId           String
  timeRange          String   // '24h', '7d', '30d', '3m', '1y', 'all'
  engagementScore    Float    @default(0)
  growthScore        Float    @default(0)
  qualityScore       Float    @default(0)
  potentialScore     Float    @default(0)
  overallScore       Float    @default(0)
  calculatedAt       DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  artist             ArtistProfile @relation("ArtistStrengthScores", fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([artistId, timeRange])
  @@index([timeRange])
  @@index([artistId])
  @@index([overallScore])
  @@map("artist_strength_scores")
}

model ArtistMetrics {
  id                    String   @id @default(cuid())
  artistId              String
  timeRange             String
  totalPlays            Int      @default(0)
  uniquePlays           Int      @default(0)
  totalLikes            Int      @default(0)
  totalShares           Int      @default(0)
  totalDownloads        Int      @default(0)
  totalSaves            Int      @default(0)
  avgCompletionRate     Float    @default(0)
  avgDuration           Float    @default(0)
  skipRate              Float    @default(0)
  replayRate            Float    @default(0)
  growthVelocity        Float    @default(0)
  viralCoefficient      Float    @default(0)
  geographicReach       Int      @default(0)
  crossPlatformScore    Float    @default(0)
  retentionRate         Float    @default(0)
  calculatedAt          DateTime @default(now())

  // Relations
  artist                ArtistProfile @relation("ArtistMetrics", fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([artistId, timeRange])
  @@index([timeRange])
  @@index([artistId])
  @@map("artist_metrics")
}

model ArtistTrends {
  id                    String   @id @default(cuid())
  artistId              String
  timeRange             String
  playTrend             Float    @default(0) // % change from previous period
  engagementTrend       Float    @default(0)
  growthTrend           Float    @default(0)
  qualityTrend          Float    @default(0)
  viralTrend            Float    @default(0)
  geographicTrend       Float    @default(0)
  calculatedAt          DateTime @default(now())

  // Relations
  artist                ArtistProfile @relation("ArtistTrends", fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([artistId, timeRange])
  @@index([timeRange])
  @@index([artistId])
  @@map("artist_trends")
}
