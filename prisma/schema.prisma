// Prisma schema aligned with rules/02-authentication-setup.md

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  role             UserRole  @default(USER)
  isPremium        Boolean   @default(false)
  stripeCustomerId String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]
  tracks         Track[]
  playEvents     PlayEvent[]
  smartLinks     SmartLink[]
  uploadJobs     UploadJob[]
  artistProfile  ArtistProfile?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ArtistProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Core Profile Information
  artistName      String    @unique
  bio             String?   @db.Text
  profileImage    String?
  coverImage      String?
  location        String?
  website         String?
  genre           String?
  slug            String?   @unique
  
  // Social Media & Streaming Platforms
  socialLinks     Json?
  streamingLinks  Json?
  
  // Profile Settings
  isPublic        Boolean   @default(true)
  isVerified      Boolean   @default(false)
  isActive        Boolean   @default(true)
  
  // Analytics & Stats
  totalPlays      Int       @default(0)
  totalLikes      Int       @default(0)
  totalFollowers  Int       @default(0)
  profileViews    Int       @default(0)
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relationships
  tracks          Track[]
  
  @@map("artist_profiles")
}

model Track {
  id              String    @id @default(cuid())
  title           String
  filePath        String    // Store only the file path, not full URL
  uniqueUrl       String    @unique // Unique URL for each track
  coverImageUrl   String?
  albumArtwork    String?   // Album artwork image
  
  // Basic Metadata
  genre           String?
  album           String?
  artist          String?   // Can be different from profile artist name
  composer        String?
  year            Int?
  releaseDate     DateTime?
  bpm             Int?      // Beats per minute
  isrc            String?   // International Standard Recording Code
  description     String?   @db.Text
  lyrics          String?   @db.Text
  
  // Technical Details
  duration        Int?      // Duration in seconds
  fileSize        Int?      // File size in bytes
  bitrate         Int?      // Audio bitrate
  sampleRate      Int?      // Audio sample rate
  channels        Int?      // Audio channels (1=mono, 2=stereo)
  
  // Privacy & Access Control
  isPublic        Boolean   @default(true)
  isDownloadable  Boolean   @default(false)
  isExplicit      Boolean   @default(false)
  
  // File Protection
  watermarkId     String?   // Unique watermark identifier
  copyrightInfo   String?   @db.Text
  licenseType     String?   // e.g., "All Rights Reserved", "Creative Commons"
  distributionRights String? @db.Text
  
  // Analytics
  playCount       Int       @default(0)
  likeCount       Int       @default(0)
  downloadCount   Int       @default(0)
  shareCount      Int       @default(0)
  
  // Link to artist profile instead of user
  artistProfileId String
  artistProfile   ArtistProfile @relation(fields: [artistProfileId], references: [id], onDelete: Cascade)
  
  // Keep user relationship for ownership
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  playEvents      PlayEvent[]
  smartLinks      SmartLink[]

  @@map("tracks")
}

model PlayEvent {
  id        String   @id @default(cuid())
  trackId   String
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  timestamp DateTime @default(now())
  ipAddress String?
  userAgent String?

  @@map("play_events")
}

model SmartLink {
  id            String        @id @default(cuid())
  trackId       String
  track         Track         @relation(fields: [trackId], references: [id], onDelete: Cascade)
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  slug          String        @unique
  clickCount    Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  platformLinks PlatformLink[]

  @@map("smart_links")
}

model PlatformLink {
  id          String     @id @default(cuid())
  smartLinkId String
  smartLink   SmartLink  @relation(fields: [smartLinkId], references: [id], onDelete: Cascade)
  platform    Platform
  url         String
  clickCount  Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("platform_links")
}

model UploadJob {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  key         String        @unique
  status      UploadStatus  @default(PENDING_UPLOAD)
  fileName    String
  fileType    String
  fileSize    Int
  uploadUrl   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("upload_jobs")
}

enum UserRole {
  USER
  ARTIST
  ADMIN
}

enum Platform {
  SPOTIFY
  APPLE_MUSIC
  YOUTUBE
  SOUNDCLOUD
}

enum UploadStatus {
  PENDING_UPLOAD
  UPLOADED
  PROCESSING
  COMPLETED
  FAILED
}
