// Prisma schema aligned with rules/02-authentication-setup.md

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  role             UserRole  @default(USER)
  isPremium        Boolean   @default(false)
  stripeCustomerId String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  tracks        Track[]
  playEvents    PlayEvent[]
  smartLinks    SmartLink[]
  uploadJobs    UploadJob[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Track {
  id            String    @id @default(cuid())
  title         String
  artistId      String
  artist        User      @relation(fields: [artistId], references: [id], onDelete: Cascade)
  filePath      String    // Store only the file path, not full URL
  coverImageUrl String?
  genre         String
  album         String?
  description   String?
  duration      Int
  playCount     Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  playEvents    PlayEvent[]
  smartLinks    SmartLink[]

  @@map("tracks")
}

model PlayEvent {
  id        String   @id @default(cuid())
  trackId   String
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  timestamp DateTime @default(now())
  ipAddress String?
  userAgent String?

  @@map("play_events")
}

model SmartLink {
  id            String        @id @default(cuid())
  trackId       String
  track         Track         @relation(fields: [trackId], references: [id], onDelete: Cascade)
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  slug          String        @unique
  clickCount    Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  platformLinks PlatformLink[]

  @@map("smart_links")
}

model PlatformLink {
  id          String     @id @default(cuid())
  smartLinkId String
  smartLink   SmartLink  @relation(fields: [smartLinkId], references: [id], onDelete: Cascade)
  platform    Platform
  url         String
  clickCount  Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("platform_links")
}

model UploadJob {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  key         String        @unique
  status      UploadStatus  @default(PENDING_UPLOAD)
  fileName    String
  fileType    String
  fileSize    Int
  uploadUrl   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("upload_jobs")
}

enum UserRole {
  USER
  ARTIST
  ADMIN
}

enum Platform {
  SPOTIFY
  APPLE_MUSIC
  YOUTUBE
  SOUNDCLOUD
}

enum UploadStatus {
  PENDING_UPLOAD
  UPLOADED
  PROCESSING
  COMPLETED
  FAILED
}
