// Dynamic Playlist Types - Updated Schema
// This shows how the schema would look after implementing dynamic types

model PlaylistType {
  id               String   @id @default(cuid())
  name             String   // "Genre", "Featured", "Top Ten"
  slug             String   @unique // "genre", "featured", "top-ten"
  description      String?  // "Curated music by specific genres"
  icon             String?  // "üéµ", "üèÜ", "üìä"
  color            String?  // "#3B82F6", "#8B5CF6"
  maxInstances     Int      @default(-1) // -1 = unlimited, 1 = single instance
  requiresProvince Boolean  @default(false)
  defaultMaxTracks Int      @default(20)
  displayOrder     Int      @default(0)
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  playlists        Playlist[]

  @@map("playlist_types")
}

model Playlist {
  id                      String               @id @default(cuid())
  name                    String
  description             String?
  playlistTypeId          String               // Reference to dynamic type
  coverImage              String
  maxTracks               Int
  currentTracks           Int                  @default(0)
  status                  PlaylistStatus       @default(INACTIVE)
  submissionStatus        SubmissionStatus     @default(CLOSED)
  maxSubmissionsPerArtist Int                  @default(1)
  province                String?
  createdBy               String
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  order                   Int                  @default(0)
  
  // Relations
  playlistType            PlaylistType         @relation(fields: [playlistTypeId], references: [id])
  analytics               PlaylistAnalytics[]
  submissions             PlaylistSubmission[]
  tracks                  PlaylistTrack[]
  createdByUser           User                 @relation("PlaylistCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("playlists")
}

// Keep existing enums for backward compatibility during migration
enum PlaylistType {
  GENRE
  FEATURED
  TOP_TEN
  PROVINCE
}

enum PlaylistStatus {
  ACTIVE
  INACTIVE
}

enum SubmissionStatus {
  OPEN
  CLOSED
}

enum TrackSubmissionStatus {
  PENDING
  APPROVED
  REJECTED
  SHORTLISTED
}
